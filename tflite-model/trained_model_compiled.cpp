/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.03.2023 14:03:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3696;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,403 } };
const TfArray<1, float> quant0_scale = { 1, { 0.046450152993202209, } };
const TfArray<1, int> quant0_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 31, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 31, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 16, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 16, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 512, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[32*1*3*13] = { 
  /* [0][0][][] */ -50,-11,23,63,-87,-4,51,-75,22,-51,-16,50,-35, 24,-37,-36,28,-41,-59,-35,-79,48,-38,30,6,1, -5,16,96,13,-127,-15,-28,-10,-15,-10,14,58,-41, 
  /* [1][0][][] */ 36,-24,-42,45,-74,-12,17,3,-2,12,-45,-21,-13, -19,8,80,26,-95,29,-16,-13,52,-8,25,-18,-8, -8,19,127,62,-13,29,-80,-56,7,-38,7,1,11, 
  /* [2][0][][] */ 45,-48,38,11,23,-20,33,-28,41,9,17,2,-19, 46,5,29,-7,34,-18,-8,-26,4,-5,19,-7,31, -127,-103,79,18,33,8,-33,-37,24,-13,-21,28,-20, 
  /* [3][0][][] */ -108,42,60,-8,8,3,-4,-40,26,-3,-20,-9,8, -67,65,21,1,73,-33,-46,-31,-7,41,38,-9,0, -34,-49,-127,-15,65,-17,1,-20,15,16,-18,-5,5, 
  /* [4][0][][] */ -37,92,-63,-92,40,46,-54,-30,45,61,-19,-9,20, -16,126,-48,-7,59,-17,-57,-38,127,60,-38,-18,3, 76,32,-31,101,40,-16,-88,83,31,-21,70,13,2, 
  /* [5][0][][] */ -94,-1,0,127,7,-62,-7,-48,-27,-8,-18,-8,-38, -66,116,-36,26,-17,-29,-49,3,28,34,-5,6,-12, 107,114,-81,46,7,3,42,-18,-20,31,-8,47,2, 
  /* [6][0][][] */ -127,31,-83,32,109,-49,-44,20,-2,5,4,6,-6, -59,-36,23,-113,67,-22,-20,-34,21,40,4,20,7, -68,76,56,-41,18,85,-5,-38,13,2,-14,33,-81, 
  /* [7][0][][] */ -77,41,2,37,37,55,26,6,9,11,8,-35,4, -127,-13,-16,11,61,33,-28,-2,23,-11,-11,8,-5, -50,-62,-27,11,-33,-14,-15,-39,24,7,-34,42,-13, 
  /* [8][0][][] */ 54,-38,-127,69,0,-32,48,-20,-20,-6,31,2,4, 13,-14,-29,8,-25,5,-5,1,8,-6,12,-11,5, 42,-31,25,-13,-49,17,1,-9,25,-11,3,12,-18, 
  /* [9][0][][] */ -126,35,91,37,-15,11,27,29,-42,9,8,19,42, -127,-5,30,-21,38,18,21,-8,-33,-13,-10,-22,24, -90,-52,17,71,70,-4,2,-66,29,-41,-10,31,-40, 
  /* [10][0][][] */ -127,-8,-8,20,2,-14,-28,-18,-9,0,-39,-2,-4, -37,-16,-13,22,1,-6,9,-16,-17,8,46,12,-10, 43,-35,-16,-18,38,23,-11,-11,-13,6,26,18,-25, 
  /* [11][0][][] */ -18,57,99,66,-20,37,-63,0,-35,5,-22,23,19, -26,55,115,79,-62,49,-127,0,-18,-17,-3,-45,-15, -2,-102,84,25,-77,5,-8,23,-18,74,-16,-12,-12, 
  /* [12][0][][] */ 74,6,-38,37,-118,75,54,-42,-57,54,-30,-21,9, 1,-34,-127,50,-13,10,2,-20,-3,9,0,-1,-19, -53,-44,5,39,40,-1,31,-6,-6,51,0,-11,-17, 
  /* [13][0][][] */ -17,-56,-47,21,101,29,-127,-35,-18,-12,-15,44,15, -14,-27,-64,-30,93,92,-27,31,-11,-46,19,2,-37, 87,45,-66,-39,40,27,56,41,2,-9,49,30,7, 
  /* [14][0][][] */ -9,56,109,-118,-46,7,-64,-8,36,-40,-13,47,0, -38,1,53,-83,-25,10,-46,58,40,-39,-34,-43,64, -124,-4,19,-52,-32,53,-35,35,127,-59,-56,19,65, 
  /* [15][0][][] */ -127,-67,47,31,-4,-8,15,-1,11,-17,10,-7,10, -52,-48,-30,-12,9,41,-19,-9,18,-5,-7,-8,12, 49,17,-37,-50,-18,20,18,8,-12,9,-4,5,30, 
  /* [16][0][][] */ -90,24,-79,-92,-106,-85,-127,8,67,-57,35,30,36, -29,41,117,-57,93,-62,-97,0,116,-8,-10,-93,-7, -97,-27,-33,107,82,-101,-66,-28,41,-72,26,-21,-74, 
  /* [17][0][][] */ -89,59,12,-9,35,9,11,8,18,-31,3,-21,9, -66,5,78,-51,-46,-29,-4,8,-7,-20,-41,-7,-14, 5,-127,-39,11,-72,34,-61,-31,24,-17,9,63,21, 
  /* [18][0][][] */ -98,-127,105,17,84,-36,17,-68,32,36,-6,25,3, 15,-53,94,-35,-69,-101,-7,26,52,30,23,-10,5, 52,28,49,-34,-47,-37,18,50,60,-38,-8,-31,21, 
  /* [19][0][][] */ -99,-33,5,24,-89,-8,-38,-48,-26,-9,35,9,-10, -79,-39,-6,-10,97,-61,65,60,59,65,-6,30,-31, -127,-62,-4,101,-44,-13,11,-22,41,-31,-66,19,-59, 
  /* [20][0][][] */ -26,30,30,2,3,-1,27,-11,-27,-25,2,-36,-17, -76,-55,-18,-31,20,47,-7,20,-18,36,-36,-12,51, -8,-127,38,66,-24,-42,20,-5,19,-18,31,13,-32, 
  /* [21][0][][] */ 121,-85,-93,-40,88,-82,43,103,-127,-25,-47,-1,-13, 56,18,-56,-5,27,-46,40,103,-16,-52,-96,37,13, 76,-4,105,19,-59,-76,-54,70,91,45,-121,13,7, 
  /* [22][0][][] */ -127,94,5,92,-50,36,-79,31,29,-36,46,-71,1, 1,0,90,51,58,-44,-14,26,56,-29,6,-6,-42, 33,-33,78,27,17,-57,56,19,-51,5,35,-11,6, 
  /* [23][0][][] */ -49,19,-41,86,9,24,-10,11,-4,5,-18,26,-47, 72,6,5,16,79,-53,52,-69,55,-22,-81,28,-28, 127,-3,14,-40,81,40,38,-89,-1,22,-36,-6,4, 
  /* [24][0][][] */ 127,-1,8,-26,-61,-43,-19,25,-1,-21,25,-11,49, 123,44,29,4,-1,-29,7,13,7,47,11,-1,-15, -27,39,10,-40,78,40,16,-14,6,-6,21,-33,-19, 
  /* [25][0][][] */ -127,-61,-43,47,-4,-17,23,-29,-32,-17,26,-18,-25, -59,45,45,-8,29,4,9,-12,-16,38,24,0,37, -42,62,69,-11,-3,-8,-45,23,-5,-11,36,-12,13, 
  /* [26][0][][] */ 35,87,102,-59,21,-31,-66,2,-38,-7,27,-11,-29, 53,66,35,-28,62,-101,-34,21,10,-17,-9,60,-11, 127,103,55,-69,11,-61,2,57,-85,35,65,-35,43, 
  /* [27][0][][] */ 119,11,-12,26,1,-27,69,-3,18,-22,35,-20,45, 127,-79,21,16,-49,44,42,-30,22,37,-68,39,-12, 104,-125,99,14,-71,22,14,-51,38,-20,13,10,-11, 
  /* [28][0][][] */ 14,31,80,9,-10,-82,-21,-94,29,51,11,20,-40, 25,39,51,85,53,-36,-122,3,68,-31,-56,112,21, 59,-44,114,127,56,63,-13,-14,-16,18,48,-30,8, 
  /* [29][0][][] */ 42,-127,-15,-14,25,-22,-41,-56,-6,-78,91,-5,-14, -21,-76,-40,28,59,-20,-24,-69,82,-8,2,50,-15, -20,26,-97,19,59,-35,19,-43,-9,18,-44,-1,-31, 
  /* [30][0][][] */ -37,15,58,-91,-9,40,-115,-67,91,33,21,-17,-38, 44,68,97,-53,-31,75,-8,-127,16,59,23,16,-10, -55,-11,67,29,-52,58,111,-80,-25,44,81,3,-6, 
  /* [31][0][][] */ -7,44,3,21,16,71,-52,58,-48,27,28,3,10, -72,-48,-17,27,79,-41,-38,0,15,19,32,-39,-41, 1,61,44,127,-3,-53,66,-32,-17,40,-24,28,12, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0040098764002323151, 0.0051794769242405891, 0.0064322995021939278, 0.0053472882136702538, 0.003638062160462141, 0.0042973351664841175, 0.0041513610631227493, 0.0066800434142351151, 0.0063302167691290379, 0.0055659562349319458, 0.0079342648386955261, 0.00400186562910676, 0.0039905779995024204, 0.0032043163664638996, 0.0035369119141250849, 0.0079978378489613533, 0.0028956134337931871, 0.0051365131512284279, 0.0045205606147646904, 0.004477981012314558, 0.005940647330135107, 0.0024391734041273594, 0.0043371911160647869, 0.0044030174612998962, 0.0043779169209301472, 0.0067815450020134449, 0.0034146490506827831, 0.0037150504067540169, 0.0031227848958224058, 0.0039902119897305965, 0.0039700474590063095, 0.0050061256624758244, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[32] = { -2501, -1012, 781, -62, -1865, -1094, -527, 954, -1691, 1011, 236, -2088, -378, -1902, -2112, -335, -1369, -702, -246, 835, 23, -5767, -325, -781, -1547, 125, -3482, -703, -815, -30, -1359, -422, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 0.00018625937809702009, 0.00024058749841060489, 0.00029878129134885967, 0.00024838236276991665, 0.00016898853937163949, 0.00019961188081651926, 0.00019283135770820081, 0.00031028903322294354, 0.00029403954977169633, 0.00025853951228782535, 0.00036854782956652343, 0.00018588727107271552, 0.00018536296556703746, 0.00014884099073242396, 0.00016429010429419577, 0.000371500791516155, 0.00013450169353745878, 0.00023859181965235621, 0.00020998073159717023, 0.00020800290803890675, 0.00027594398125074804, 0.0001132999750552699, 0.00020146319002378732, 0.00020452083845157176, 0.00020335490989964455, 0.00031500379554927349, 0.00015861097199376673, 0.00017256465798709542, 0.00014505384024232626, 0.0001853459543781355, 0.00018440930580254644, 0.0002325352979823947, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[64*1*3*32] = { 
  /* [0][0][][] */ -17,-52,-61,-109,-43,13,25,-98,72,-105,-52,33,65,17,-18,-84,-39,-76,4,-124,-6,68,56,-25,59,-118,-77,-14,5,32,0,9, -18,-92,-84,-60,60,-3,-23,-82,23,11,19,-36,-87,22,35,-5,11,-39,-101,-73,-36,46,-63,41,21,-100,-31,-44,0,74,46,-29, 24,41,-73,20,35,6,59,-6,0,-16,-93,1,-61,27,33,-6,12,-40,-86,-17,-75,52,-2,13,13,-8,30,-127,5,63,80,-3, 
  /* [1][0][][] */ -96,-17,-66,-40,40,34,54,-3,-51,-11,-65,-15,85,-42,-43,-20,-57,54,-20,-33,61,2,-15,-84,-71,4,25,-3,-19,-65,33,-52, -78,3,-33,-11,-30,-66,34,-10,1,-74,-36,-4,-28,-54,-127,0,-31,19,-18,-39,5,6,-40,-101,87,66,-61,1,-100,5,30,-67, -57,-17,6,9,-43,-78,36,-10,12,-73,-38,10,-41,-62,-50,-67,10,-34,-60,-38,19,-85,25,20,-98,-15,-29,-111,-54,11,-63,-89, 
  /* [2][0][][] */ -116,-55,-26,-12,40,75,32,-36,15,-28,8,-49,24,13,-41,-74,-2,-63,-67,18,-99,-49,-55,59,-65,4,-15,-42,-35,15,-51,-23, -26,54,-68,0,2,37,-32,-125,63,-28,-17,-21,-17,50,17,-54,-40,-70,16,-60,-118,37,-48,46,-54,-39,-37,59,-2,-20,-57,-70, 112,100,0,-18,-75,-53,-32,-33,35,-31,-47,78,-54,-37,48,-103,-41,-38,12,-16,-127,-19,-2,-102,-21,4,29,5,17,-10,-44,2, 
  /* [3][0][][] */ -86,-6,-37,65,30,39,-25,-40,-48,-9,-101,-9,-102,-51,-47,-74,-3,-123,23,-127,-60,18,-7,3,-29,34,48,-19,33,-17,-55,26, -39,1,-18,25,4,26,-54,-73,83,-79,-26,-69,-19,22,-27,26,-76,-75,-4,-17,-69,-28,-76,7,13,-53,-44,93,-38,-61,-30,-103, 61,90,7,4,-107,-127,-70,-28,48,-40,42,37,-25,-30,-14,15,17,5,22,-51,-20,-7,-38,-49,-12,-17,-115,112,70,-23,-83,-9, 
  /* [4][0][][] */ -87,-20,-23,55,-40,-28,18,-16,-66,47,13,-37,-19,-114,-35,-34,-27,0,-77,-8,-14,-33,-18,-7,-101,-4,-23,-72,13,-17,6,53, 47,-40,-34,-47,-40,-32,-19,-38,56,-57,16,13,-76,-67,-16,58,-29,55,61,-49,-31,-23,-21,22,-95,-1,30,47,-1,-63,-19,-58, 72,9,-56,-94,-30,-39,28,-4,32,-127,-43,32,37,-21,58,-1,-92,-24,70,-113,-26,-126,-66,-69,-3,-73,-10,51,-42,-57,85,-81, 
  /* [5][0][][] */ 2,13,21,-8,-47,14,-14,8,-33,19,51,-56,-44,-49,2,11,-40,30,7,36,-22,-58,0,42,-1,-13,5,26,-23,-78,-33,-1, -10,-2,58,-127,-57,-64,-63,-25,-83,-62,-26,-44,-56,-54,-43,-36,-60,15,29,-40,-11,-47,-61,-10,-6,-71,0,46,41,7,-42,-25, 15,3,52,-19,-23,98,-25,-22,-35,-18,-35,-35,-70,-32,-23,50,-86,2,41,-59,-23,-44,-6,39,2,-5,21,19,11,-27,-38,0, 
  /* [6][0][][] */ -3,-9,1,81,55,84,-20,19,-25,16,-72,-57,-65,-3,0,-91,65,1,-54,3,19,-62,7,-29,-6,85,71,-36,17,-68,-18,-1, 5,46,10,-22,-5,24,-67,-84,19,-1,-65,-67,-46,-26,-55,-36,22,-127,-67,-5,-11,-45,-12,-1,2,15,21,7,-35,33,-42,49, 56,90,-77,-104,-76,-53,-116,-36,80,-64,4,32,8,-8,-38,59,-42,-123,20,-87,-48,2,-37,-27,6,-100,-13,40,7,-45,-28,-29, 
  /* [7][0][][] */ -32,-53,-2,51,-28,-38,34,31,-51,-23,79,65,-43,19,-2,-23,59,80,-17,-7,9,-21,63,-36,-102,32,-42,-97,-32,-4,0,-22, -62,-66,-80,-2,7,-48,-10,-15,-31,-38,12,-117,-18,46,75,69,13,114,69,-33,-96,-92,-49,-11,-55,-53,-53,22,-125,-25,-77,-31, -29,-55,18,-93,9,-39,34,-35,29,-50,-17,27,32,36,60,-25,-21,59,-42,-60,-37,64,-38,-10,78,18,7,64,-127,-49,0,-11, 
  /* [8][0][][] */ 91,13,-85,23,-94,20,-64,53,71,75,-18,-61,-48,-84,-81,-32,-24,-51,-4,-16,72,-1,26,-118,23,-40,-27,16,23,50,-36,67, 108,17,5,-65,-78,6,-68,-92,87,-51,-26,-72,-47,-105,-8,-93,54,-51,-29,-7,24,30,-51,-111,55,71,29,-34,62,-92,-127,-38, 63,-82,-49,39,0,60,-80,-16,8,-48,-55,-63,-48,30,46,-87,123,-21,-75,21,-79,49,67,-73,48,-59,106,-114,46,-111,-100,13, 
  /* [9][0][][] */ -24,-9,-71,70,-52,0,-29,23,30,-34,-52,-67,-9,43,-66,-20,20,11,-42,-5,-58,31,24,3,21,-24,109,40,-73,-47,-108,-70, 41,-17,59,-22,-99,-74,-52,-70,-6,-90,-38,-36,72,-55,-19,-66,5,-34,52,15,4,14,41,21,42,4,-51,49,-37,-33,-9,-46, 26,21,38,21,-93,-48,67,-46,-32,-33,-36,-41,27,-21,29,0,-7,41,43,68,29,-124,10,-3,-63,20,-127,-1,8,-20,-21,9, 
  /* [10][0][][] */ -39,-11,-14,-10,59,-17,-7,-8,14,-8,-51,-76,-57,-7,-23,-71,59,-69,-72,-40,107,89,-66,-27,96,-87,53,-50,37,-127,82,-107, 35,-43,-89,5,-4,-37,-62,60,-38,-42,35,-57,-60,-42,-7,3,62,-10,-55,46,2,75,-40,-12,48,-48,20,-56,-33,-40,55,-78, 55,-109,3,59,-45,-72,29,77,-109,-55,22,-48,-7,-21,21,-17,0,40,-3,34,52,-71,-120,-98,18,-54,59,-93,-108,0,59,-80, 
  /* [11][0][][] */ -24,-80,-72,-9,66,-21,17,-28,-36,-63,-33,-40,-85,48,-29,-13,6,-16,-6,-72,6,-72,-61,30,79,-35,36,-115,-47,42,5,-26, 18,59,10,44,14,-56,68,52,-50,104,-90,12,-57,-59,-6,-51,-79,27,-87,-37,69,-93,-62,92,13,-125,-69,23,47,-40,1,64, -65,-24,-53,17,3,-10,54,24,-34,-12,-34,-48,26,19,-118,-5,-28,-121,-6,16,-5,1,-127,122,-35,-8,-46,14,38,42,-77,-33, 
  /* [12][0][][] */ 44,-21,5,30,-74,27,-65,53,-1,18,50,-63,-56,-84,-44,29,-45,27,127,2,-12,-36,-41,-44,36,6,46,21,-27,25,-87,32, 25,17,14,-67,-45,-3,-14,12,-15,-80,-20,-26,31,-69,39,-103,-51,43,46,-33,8,-33,-45,-40,61,-36,-28,32,-26,-23,8,-37, -24,-12,39,-58,26,16,-31,-14,-53,-79,-53,-26,-11,69,-16,-4,-82,38,112,-40,-48,-36,-70,60,-34,-70,29,32,31,-11,-5,12, 
  /* [13][0][][] */ 16,38,-54,36,-23,-10,-58,0,-27,-50,127,12,-15,19,5,117,-26,6,-54,-18,-11,13,-29,53,2,-61,-23,8,31,-6,-12,-7, -28,-15,-24,-36,-53,-17,-32,-25,8,12,42,2,-32,4,56,35,10,-3,-47,-9,11,49,-29,8,60,-118,66,46,20,8,-51,17, -11,10,-41,-18,-3,-6,-36,0,-79,-34,-64,-10,-55,-57,51,-36,50,3,-38,-61,-41,39,-67,-11,44,-36,23,-28,-11,-60,-2,-51, 
  /* [14][0][][] */ -12,-45,31,6,-75,5,-36,-31,-72,-18,42,-73,26,-97,51,-21,49,-16,39,50,39,32,-7,-23,18,63,-57,-54,-22,22,-6,68, -94,-6,46,-96,36,69,-35,-41,-55,-27,31,-18,-29,-76,-46,4,0,-26,36,13,7,-37,58,-98,-127,15,-5,-53,31,4,84,-27, -56,-83,31,-56,-125,-27,1,-37,-37,-60,-55,-29,-2,-10,-17,76,-55,51,105,-61,-68,99,96,-21,-30,17,-22,24,-36,-95,-82,-25, 
  /* [15][0][][] */ 4,-58,-14,43,4,-20,6,-15,-45,15,-33,-22,-57,5,11,-23,18,-29,28,-39,-35,14,33,-24,6,54,74,31,45,-127,-16,-17, -8,0,-100,-35,-62,-64,-48,-49,-26,-40,6,-20,14,-1,-96,-11,-32,2,3,-60,-10,3,-13,-48,43,-12,-3,54,-97,-65,-12,-41, -44,-62,44,-34,-17,-40,0,-17,13,-48,-11,-14,61,-1,-84,-63,-13,7,-17,-56,52,-39,64,45,-1,-44,-98,13,11,11,-56,64, 
  /* [16][0][][] */ -25,-35,114,-127,-109,-42,-120,-76,-58,-68,-55,-26,-34,-28,-10,-55,-77,6,54,-64,-27,-44,-87,7,13,-101,-32,22,46,22,-42,-45, 7,0,65,-28,-17,51,-16,22,-64,5,-35,19,-44,-65,-18,32,-17,38,41,-35,16,-9,-40,-45,-16,-1,8,-38,7,16,-13,-10, -30,-69,-108,-18,55,64,-53,-73,-1,-34,17,-43,49,-8,-57,43,-27,2,25,-102,-47,-12,-4,12,51,66,33,25,-63,-39,3,-3, 
  /* [17][0][][] */ -4,-66,-52,23,43,-50,-91,6,-23,-55,-49,-77,-94,12,70,-88,30,-1,-22,15,27,-61,-21,-110,-28,-73,4,-27,-127,-36,-52,-44, -18,-116,8,-8,-63,-69,-17,-117,-63,-79,-79,-87,-82,19,-39,-54,45,-57,-23,-47,-38,-28,-25,7,-44,-111,21,-17,-89,-53,36,29, -86,-96,-7,71,-12,11,46,52,-111,52,-7,-65,-13,-67,-44,48,-30,-40,17,16,-101,-41,-2,-28,-96,76,37,35,-74,-26,-27,51, 
  /* [18][0][][] */ 75,5,-41,-32,-22,-10,24,30,-22,-26,-4,-44,-12,-39,28,-12,100,-93,-94,67,-8,10,-11,-26,-10,11,-23,-23,-14,-57,-20,34, 14,-7,47,61,30,9,3,-44,-62,-66,-2,-86,-127,-27,0,-13,120,-109,1,-71,-68,-41,20,43,12,-71,98,-66,63,9,48,-115, -12,-62,-4,-1,11,-59,-72,70,-24,-14,9,-44,-15,22,-66,-22,-31,-61,-57,-35,-94,-8,-49,-69,52,-61,38,-17,-11,12,100,-56, 
  /* [19][0][][] */ 33,75,-52,-41,-35,30,24,-70,-9,-55,-73,53,-2,1,25,-65,18,-36,-101,-49,-64,3,42,42,-72,75,36,-21,44,-9,13,3, -21,-42,10,12,-3,-18,-76,-93,-10,-127,-76,50,-7,10,-2,-53,49,-53,-35,-56,-7,-14,40,35,-34,-29,29,11,-18,-3,-9,-88, -86,-34,-17,-35,-10,-34,-24,-112,20,-92,-10,-33,13,-2,-60,-9,-23,-66,-17,-62,-28,23,-46,13,-18,-90,-21,50,-2,-56,-9,-50, 
  /* [20][0][][] */ 34,-54,8,-49,-8,17,31,-54,77,54,-111,-37,31,-24,-65,-105,73,-76,-79,-7,-13,73,-21,-22,-1,-30,-3,-35,75,-2,50,-44, 14,-21,9,-38,55,23,48,0,-22,-57,-33,-73,-111,-63,-58,-36,48,-49,-70,15,-22,47,-46,-52,-29,-61,33,-34,35,-27,65,-51, 15,-27,-87,-34,44,55,13,33,-14,46,-7,-28,-63,-56,-59,0,-12,-77,-49,-14,-28,6,-67,-19,62,20,85,25,23,-106,127,-61, 
  /* [21][0][][] */ -73,-13,-112,44,-2,59,41,-9,-86,8,19,-30,-126,5,-2,18,-53,11,-100,-61,60,-52,-31,-76,-111,75,-26,-127,-44,-33,-19,-44, -101,24,-37,69,68,96,35,-45,-11,6,-1,-59,-16,-11,-71,-66,-37,-94,-84,-44,-28,-4,-28,-19,-48,57,-47,-19,-20,-32,22,-17, -1,79,-20,38,-4,58,-8,25,79,43,26,-28,-36,59,-53,23,-30,-5,-68,-1,-21,46,-58,25,-61,14,-46,92,-51,-44,-1,-58, 
  /* [22][0][][] */ 25,-5,-47,36,7,-28,69,-19,-11,18,-25,28,-23,-12,10,-16,-1,14,37,-38,-62,10,24,-12,-54,112,55,-22,45,-63,-3,7, 37,-43,-47,-56,-103,-65,-21,-82,-15,-84,-22,49,26,32,12,-55,-10,5,53,-27,-33,9,18,-44,-12,85,-25,-4,-19,-32,19,-30, 2,-19,-80,-67,3,-10,8,-25,8,-127,-27,32,46,-22,-34,-35,-17,-44,-9,8,-8,20,55,35,-9,13,-62,-42,-88,54,31,-40, 
  /* [23][0][][] */ -8,64,-5,65,-93,-87,-72,69,-31,-37,28,-46,-4,-47,-48,41,-45,85,88,-12,7,-92,2,-96,8,-36,-76,-9,-40,34,-32,-16, -38,-91,-69,-9,7,19,-39,-63,24,-127,116,-18,33,82,4,57,-124,45,2,15,-24,-8,-101,33,12,-105,-38,9,-22,39,-20,-34, -31,-65,-30,-97,30,20,20,-69,57,-33,-33,-36,-16,50,52,-77,-29,3,-30,31,-78,9,-50,104,86,-62,44,-101,-12,60,-27,87, 
  /* [24][0][][] */ -46,-68,123,6,-6,-70,-99,-61,-86,-8,-20,-51,-4,-47,-6,-62,-52,-43,59,-67,-47,-101,-55,-23,80,-29,79,-17,4,58,-56,16, -45,37,42,-77,-127,-5,-81,-3,0,-123,-4,33,8,-37,-69,76,-46,43,86,19,-26,-38,-83,18,46,-50,-37,4,-54,2,-44,40, -74,-7,78,-30,1,29,-36,-46,18,-68,32,-40,24,6,-89,-6,62,-69,66,-88,0,-66,14,45,64,8,-18,39,1,34,-18,-101, 
  /* [25][0][][] */ -43,16,37,-38,-12,6,3,-20,-31,-1,17,-18,5,-6,-32,-39,-69,17,49,22,-2,-90,8,66,-12,14,-15,-8,32,-23,-70,10, -18,16,71,-127,-7,-22,-16,-35,-47,-83,-86,29,-50,-19,11,-78,-26,25,9,-4,-71,-9,-1,41,-22,-14,-11,-5,50,46,-6,-52, -25,-40,9,-80,7,61,-32,-29,-72,-66,-46,-4,9,-8,-25,45,-7,52,21,14,-15,-15,4,36,12,35,20,18,-11,22,27,-14, 
  /* [26][0][][] */ -55,18,-9,40,39,56,-49,-104,-102,-69,127,-77,-88,45,7,99,18,-61,-36,-117,-43,19,-42,5,-3,34,84,11,-49,13,-34,3, -29,67,-54,5,15,21,-108,-98,34,-79,5,-14,19,27,16,-24,26,15,-74,69,-69,50,-52,-13,23,-118,33,26,-54,-17,-86,-11, -4,74,-30,74,-90,-12,-4,-18,39,-57,61,-16,7,14,56,8,-6,-46,22,0,-47,1,-21,-111,-32,-70,-60,-22,-48,-58,-106,33, 
  /* [27][0][][] */ -23,-58,110,-90,37,-127,-111,-21,-75,-86,-87,-7,-31,27,-58,-43,-83,-25,37,-95,-89,-121,-10,19,61,-41,-25,59,3,-3,-41,-12, -5,25,32,-14,-79,-24,-2,0,-40,-87,-54,27,-26,-59,-42,38,-10,-64,75,-74,15,-47,-10,23,1,41,-41,23,17,92,-83,-95, -3,-34,-11,8,14,90,24,15,-22,-33,2,44,49,81,-38,0,67,-22,67,-84,18,-69,-58,83,-7,65,41,17,-104,21,-93,10, 
  /* [28][0][][] */ -11,22,-17,-48,-22,-18,20,51,-72,0,-24,-42,-81,-55,-49,-62,18,-54,-21,17,-3,-17,3,20,-11,-14,2,-40,5,17,-23,-19, 82,26,-29,-34,-10,-48,40,-62,17,-43,-17,-62,-82,-14,35,88,-50,-17,127,13,28,43,20,2,4,53,-44,15,46,-59,6,-16, -65,-29,7,14,7,-82,-28,-43,15,-66,-105,-36,5,37,-4,-15,-72,-97,-60,-56,-113,36,-27,47,78,18,40,96,33,-47,9,-21, 
  /* [29][0][][] */ -14,-53,-124,8,14,69,-21,-92,16,-37,-54,-35,41,90,-127,-97,-38,-6,-95,-81,-81,-112,-41,-7,-5,10,-28,-39,-100,33,-54,50, -24,-55,-80,19,92,68,-49,0,-15,3,1,-92,-22,56,-69,-89,-54,39,-112,11,13,-30,-60,-14,-71,-29,-18,-123,-40,-1,-47,61, -31,22,-90,24,46,23,15,-6,76,-60,24,38,-46,44,7,40,39,17,-51,15,45,74,48,-31,-92,12,-39,-5,-42,42,-80,64, 
  /* [30][0][][] */ -12,9,-19,11,7,29,39,-127,74,-66,-23,-63,22,-19,-31,-117,5,-40,-32,-82,-52,34,-70,-18,-9,-83,-26,-28,-17,38,41,-48, 29,46,6,20,-12,-34,38,-90,13,-32,-66,3,-36,15,-1,28,-5,-106,-6,-15,-83,26,-106,-11,-24,-114,-7,-5,39,31,16,-74, 44,53,-63,-26,9,40,30,-16,-14,-8,-50,41,-14,-23,19,-25,19,-86,-33,19,-102,23,-27,-19,29,-48,55,-46,49,-33,58,7, 
  /* [31][0][][] */ -4,1,-6,-7,-70,3,35,6,-20,31,13,4,-11,45,30,45,-13,24,-36,17,2,-18,-40,-59,-86,20,-76,-2,5,4,-63,-38, 94,16,-9,-17,7,30,11,14,-66,-29,-23,27,-22,-21,42,35,10,-60,15,-70,-79,-34,3,-38,-25,-5,-2,-75,-3,0,71,13, -21,-44,-34,96,72,122,-100,-71,-81,-95,-127,-36,-126,-3,-3,-23,69,-68,-32,-95,15,-24,16,-65,5,-14,60,-88,-25,-11,-2,-20, 
  /* [32][0][][] */ -90,-12,18,-18,-5,-7,-93,3,83,-51,-93,-13,42,21,-52,-63,-73,-61,-29,-16,-59,-25,36,20,18,-21,-34,68,-36,-7,-63,47, -62,-5,49,74,-88,-53,-50,-34,-26,-27,41,-2,32,0,-8,13,-23,-40,69,-27,24,-42,-22,-22,-30,-10,-44,43,17,-21,-57,-28, 17,-37,103,-15,-66,-109,-1,-35,-71,-60,18,-6,8,-127,39,-85,26,42,65,40,30,-66,-15,-76,-19,-28,-82,42,47,20,-11,-27, 
  /* [33][0][][] */ 39,16,-68,-53,-103,-45,14,-56,30,-55,-39,52,15,-30,55,-77,-73,44,88,-23,-72,51,-30,-127,35,16,5,27,-16,-25,28,-67, 26,2,5,-42,-55,-59,-62,-38,18,-46,-34,5,10,11,22,-37,-28,-50,-77,-75,6,2,-58,17,-26,-17,-69,-4,-62,15,24,-48, 0,-53,56,-51,-48,7,55,-24,-4,-48,-7,-30,8,-30,-49,-75,-26,-13,-1,-29,37,-28,27,113,-21,-75,0,25,5,60,-14,-43, 
  /* [34][0][][] */ -24,-64,2,-11,35,11,49,1,-127,-30,58,-56,-11,36,-22,10,27,44,26,-38,43,-23,-11,-62,-78,12,-31,-74,-27,6,-21,31, -103,-83,-56,14,-69,-41,-29,23,-40,8,-4,-58,33,18,-44,5,-7,-39,-26,-30,53,-57,-25,-70,-111,25,-50,-77,3,4,-57,40, -34,36,3,14,-47,-45,-10,34,-93,-1,-39,16,-4,13,-52,25,-36,18,28,32,30,29,-72,-75,-32,14,-39,-64,-28,-8,-53,21, 
  /* [35][0][][] */ -27,-36,-6,28,21,46,39,-42,48,1,-43,-42,13,3,-14,-32,-33,31,-70,-2,7,-12,-19,25,16,-23,-3,-22,-67,17,-24,-48, 27,22,-9,-4,3,-71,18,-66,33,-59,-76,5,13,47,27,-46,5,-42,32,-6,-81,10,-24,2,-53,-2,-26,3,13,29,-7,-42, 40,77,-40,-39,4,-28,-44,-102,-30,-76,-62,69,-37,1,4,-123,6,-68,-4,-43,-127,-2,5,-14,-52,-14,12,10,52,-7,-3,44, 
  /* [36][0][][] */ 18,-35,-5,20,58,-79,-56,-29,-8,-71,-48,14,-52,68,5,-28,61,-86,-40,-55,0,58,89,-33,-1,26,68,-81,25,-16,-79,42, -72,-34,6,-83,-17,-1,-122,-34,36,50,1,35,64,10,-59,10,-71,-57,-47,-13,-9,17,63,-25,-11,20,-8,8,-27,-32,-96,56, -27,8,29,-43,-40,-75,-109,-18,-1,25,8,19,72,-20,-127,-22,-16,-20,-7,0,48,-28,26,-20,18,-79,-78,1,63,-42,-49,-27, 
  /* [37][0][][] */ 3,-10,-125,-19,33,-35,28,-112,-45,-76,-91,83,1,-59,-35,-40,-40,18,34,-101,-41,-13,9,-73,-38,-42,10,-4,21,-95,60,-127, 15,16,-17,-6,-8,-3,-1,31,14,-4,-62,44,45,-32,-3,15,-13,-32,40,-21,-33,-31,25,-11,-30,-96,-11,-1,13,-39,60,14, -59,-53,64,-42,-20,-32,32,0,29,61,-17,-14,-24,9,9,-20,-49,-17,7,1,12,36,4,83,-11,-62,-19,-17,-44,10,9,5, 
  /* [38][0][][] */ 54,-9,-45,-18,46,64,-52,-33,-20,6,39,-73,-74,-1,-71,18,4,2,20,19,-30,36,-49,-40,8,-9,21,-9,-9,-13,-75,51, -26,47,-52,28,52,59,-34,-95,-2,-50,41,-59,-43,-4,12,-36,63,-40,-12,-42,-21,-9,-83,-39,10,-58,-16,17,30,-32,-80,48, 74,82,-14,94,13,27,-24,14,19,-28,41,21,-16,64,18,51,-16,5,6,-9,-72,11,-127,-62,-38,-18,5,0,-32,5,5,-31, 
  /* [39][0][][] */ 22,78,-36,47,-17,-15,27,-38,94,-22,-66,-3,-2,47,13,-64,55,-6,7,29,-127,69,-37,-16,-58,-18,-26,17,-20,-8,-19,-18, 39,62,-65,14,-105,40,-17,-97,-46,-74,-43,74,-50,-83,19,-29,22,64,-19,-1,-106,4,54,-15,-30,-93,29,3,27,-49,65,-17, -32,-39,-19,-38,-48,-32,-5,-32,-33,-71,-5,19,9,-34,2,16,37,47,-43,-22,-61,-34,18,26,-72,-45,-31,-15,17,-8,15,-37, 
  /* [40][0][][] */ 31,30,-54,-40,61,5,-19,-42,-56,-55,-45,19,-85,37,-18,-64,27,-100,-56,-43,25,-7,57,37,-52,40,32,-64,52,-23,-49,20, -28,14,-4,-31,-55,-35,-68,-62,8,-28,-33,9,-9,15,-127,-5,-38,-87,-73,-34,23,0,45,26,-25,22,-14,35,20,-13,-21,-29, -49,-79,-25,-93,-5,-49,-23,-41,20,11,-11,-20,33,15,-67,-56,-18,-7,-28,-77,12,27,-20,26,17,-41,-26,56,-81,-44,45,-40, 
  /* [41][0][][] */ -47,-65,-56,58,76,91,42,-74,-110,-51,-83,-75,-56,13,-76,-58,-42,8,23,-72,-38,-1,16,-53,-32,13,-48,-85,-58,-6,8,29, -90,24,-27,19,90,90,-78,-115,5,-49,-15,19,-23,-53,24,-36,-13,-8,-48,-53,37,26,14,5,-57,-24,-34,56,24,-8,-37,-28, 85,127,38,12,3,20,-53,-23,33,56,3,92,-14,85,-52,15,13,-30,-51,63,27,66,31,-31,9,-60,1,-3,23,-21,-72,5, 
  /* [42][0][][] */ 2,-63,-5,57,-34,14,30,-50,-54,-127,20,-32,-70,11,39,-3,52,-43,35,-52,-10,14,28,10,-19,-84,-82,-34,-9,55,-74,-4, 22,-9,-5,42,0,-97,30,-84,-10,-49,-32,11,-59,-13,12,20,-87,-39,-89,-15,48,-43,-15,-16,-32,4,-75,-86,20,-3,-67,-119, -56,-39,37,-48,11,-91,-50,-69,0,50,-84,35,-1,1,6,15,-9,-61,32,-9,7,-25,-4,35,1,-43,-2,-25,-57,-74,-69,-39, 
  /* [43][0][][] */ 3,-21,23,-16,-127,-56,-41,13,-39,18,9,50,-44,-77,-21,-33,9,53,-4,-40,35,-68,19,-39,16,8,-34,-101,-65,-6,-24,-37, -82,-80,-8,2,-113,-75,-14,27,-28,29,32,-17,12,3,28,57,-51,15,64,42,14,24,-58,-54,-78,20,-61,-106,-23,16,-105,-48, -4,23,-11,-13,-16,-72,-11,26,-20,-26,45,-33,-50,-39,13,22,23,59,-31,5,-19,-10,-22,-67,-88,-37,-65,-51,-41,63,1,12, 
  /* [44][0][][] */ -35,-95,-9,-2,-9,7,89,-117,11,-127,-76,-43,-1,32,-47,-122,-14,-110,-80,-118,-86,-18,-64,57,-5,-72,41,-64,-9,16,33,-74, -39,-19,-64,-58,54,-21,-28,-100,-114,-26,-45,27,-20,-47,3,-39,-6,-28,-37,-97,-40,-3,32,31,-58,-87,-21,-21,15,0,9,-10, -9,36,-39,-67,40,28,-51,-27,-59,14,-78,72,7,-45,8,-37,-41,-63,-81,67,-81,-28,84,-22,-4,-20,23,-8,54,-27,3,94, 
  /* [45][0][][] */ -26,-29,1,-8,-10,21,-5,4,20,-35,27,-56,-12,19,-30,77,60,-80,-63,-41,-50,42,-13,18,42,-68,46,-13,58,-127,45,-116, -21,-9,21,25,16,2,4,38,-35,10,-8,-17,3,-19,-34,-61,31,9,-25,-9,-25,5,-34,-86,28,-119,35,-27,16,-42,39,-35, 46,-78,-31,24,-64,-68,2,45,-3,-5,-18,-69,-23,-16,-34,-26,10,-56,19,-19,7,-58,-79,-36,50,-56,9,-31,-60,28,62,-45, 
  /* [46][0][][] */ 74,-30,-26,-13,5,13,-10,56,29,1,-3,26,10,-40,35,-98,68,-47,-28,23,-39,-88,37,2,7,-22,44,18,50,78,32,71, 72,-7,-8,-15,6,-22,-2,-46,10,-57,-33,-33,57,-43,-38,-39,26,-82,-9,30,-69,-32,-5,-43,28,29,56,-17,24,7,3,-63, 2,-6,-127,-10,-33,13,-58,-45,-34,-67,-99,7,15,-22,-13,-79,13,-42,-43,6,-114,-41,-28,-60,40,-22,68,6,-6,-79,23,-110, 
  /* [47][0][][] */ -63,-84,26,33,9,-86,21,53,-26,-20,-52,3,-27,-14,87,-80,-37,19,79,-64,-77,27,-37,-6,79,3,95,-7,17,70,-105,-74, -2,-17,10,-56,-52,-40,-26,3,12,-127,-16,-66,2,27,-52,-16,41,-16,18,-8,56,-19,47,-24,-4,36,15,-6,-93,37,-29,-70, -39,-84,57,-36,-25,18,-36,-44,16,-104,8,-80,107,4,-53,-45,-17,19,-15,-16,49,-30,31,-3,0,-39,-121,-13,-13,56,-56,30, 
  /* [48][0][][] */ 8,-55,-62,-2,43,-52,-75,16,-25,-110,2,-60,-25,74,-11,-13,-2,83,16,-20,-6,42,-51,26,85,-90,30,8,-22,-12,-116,-43, -15,-61,-101,69,16,-66,-39,1,14,-73,46,31,27,69,66,-9,0,60,-59,-78,-27,-9,-3,-77,18,25,21,14,-66,1,-55,78, -30,-52,18,20,14,-18,-22,2,-22,-58,-11,-94,7,46,-19,47,-30,59,30,14,70,-33,-22,-48,-69,2,-83,-95,-81,22,-127,77, 
  /* [49][0][][] */ -39,1,-14,-34,36,-38,50,-10,6,-36,-18,33,72,42,-33,-18,4,-18,-50,-42,-71,24,11,64,-48,-89,-23,-77,25,38,-1,-7, -12,10,-14,-33,26,-14,-29,-17,-55,-22,-32,49,-12,40,14,-45,-2,-44,29,-15,-81,-29,43,29,-36,-15,-10,-81,54,10,-73,38, -32,17,27,-49,-7,-4,-58,8,-73,-1,-9,-22,3,-20,-14,-62,1,-33,-38,3,-27,-26,-3,14,-72,-13,28,-127,54,-44,-22,79, 
  /* [50][0][][] */ 37,-30,9,19,-67,-52,27,10,-19,55,22,25,-22,-7,68,-33,-45,107,46,46,6,15,28,-12,-50,-44,-28,-23,-24,35,0,23, 78,5,-46,-113,-95,-7,-79,-47,39,-63,-127,61,5,13,82,-73,-81,19,90,-54,-94,-29,-46,-106,12,-18,1,-15,-20,-38,57,-87, 57,10,-105,-82,-66,14,-62,-42,5,-82,-17,-28,64,6,16,-64,-104,-24,-71,-38,-4,15,-66,0,-14,-81,-51,-58,-52,52,30,-6, 
  /* [51][0][][] */ -58,42,48,-14,-15,-57,-8,28,4,4,-19,29,65,-28,-18,-4,-36,-10,-19,-50,39,-107,-31,-2,32,6,-78,-47,7,-31,-24,23, -11,-34,34,-67,-13,-12,-77,-61,8,-10,-21,-9,-11,-4,-18,-20,-83,55,-24,23,15,-45,31,-72,20,32,-64,-6,-12,-18,8,-33, 73,19,23,33,-17,2,-27,-29,36,16,-21,37,-22,-29,-35,22,17,25,8,26,28,-21,-9,43,-18,-28,-127,-12,28,-6,50,29, 
  /* [52][0][][] */ -21,49,-5,-1,27,14,17,-16,-61,-48,72,-23,-41,21,15,84,30,-40,-31,-32,-44,-39,-17,-11,-69,9,-2,-88,0,-2,-25,-4, -70,-5,-2,34,36,39,-39,-10,-5,-65,18,-32,-50,66,24,56,8,-67,-44,-89,-88,19,16,-18,-10,-10,67,3,-5,22,-47,41, 49,83,-127,-102,-82,-31,-86,-108,38,-113,-32,-12,20,-11,27,-24,-3,-49,-30,-97,-14,27,-6,-14,2,-110,35,70,-30,-71,-31,5, 
  /* [53][0][][] */ -13,51,-37,-67,-34,7,71,-3,-73,-26,52,49,-2,-36,-19,-35,13,-25,-41,7,-14,-30,33,26,-106,36,-52,-11,24,-25,-4,-9, 9,-19,1,-127,-7,-34,31,-96,-46,-34,-51,46,36,-11,-3,-92,-1,1,-16,5,-24,44,37,82,-55,35,-4,23,26,-40,-2,-40, -22,-59,-33,-45,8,-3,25,-41,13,-81,-6,53,7,22,56,14,-9,65,-17,-6,20,54,-6,54,-11,-38,1,-5,-38,-8,29,-103, 
  /* [54][0][][] */ 33,12,-127,-63,-2,-4,-84,-61,25,-67,23,-46,-8,61,-31,55,-8,41,-29,-43,-7,61,-57,36,5,-113,-5,-41,-22,13,-20,-3, 27,23,-54,-35,53,25,-15,6,-3,39,-12,0,-12,20,56,-28,56,31,1,23,-2,-7,4,11,70,-80,30,-10,8,10,10,20, 13,7,-74,23,8,6,-13,-28,-42,6,-53,23,-33,4,54,12,-5,22,-64,18,-10,31,-41,-41,24,26,-21,-123,-26,-21,3,25, 
  /* [55][0][][] */ 25,1,-18,-21,-56,-48,-2,-27,-10,-4,71,15,13,-8,72,-16,10,36,-32,-1,-15,-10,76,-24,-111,-12,-120,-82,-42,33,7,-25, -40,16,14,9,-50,15,22,-10,-34,10,62,-16,-94,38,93,79,-61,68,-31,-78,2,-2,-42,16,-71,-31,-24,-12,-82,32,-33,-100, -62,-60,-89,-62,-23,43,-8,-93,-1,-9,-43,-42,-74,84,127,58,-87,2,-47,-68,-78,42,-33,33,11,-65,72,35,-37,19,-42,-76, 
  /* [56][0][][] */ 6,36,31,-3,-98,-1,-101,-11,-33,11,-8,-16,72,-35,-96,-88,-62,-65,-76,40,-34,34,-36,-87,-29,-117,3,-27,-65,-47,-127,-52, 79,-95,-4,-81,-73,37,11,-24,-3,-25,-3,21,-64,-102,-81,-31,32,14,8,-46,-94,-79,-104,45,-79,4,-62,-39,54,-17,5,-69, -13,-46,-67,-58,-43,-14,29,34,-7,34,-58,4,-55,-1,-23,-98,34,11,5,-71,30,-74,-59,15,-26,-37,64,-24,-18,-1,5,-61, 
  /* [57][0][][] */ 33,30,-51,-39,3,-15,95,-30,-22,20,-11,33,-14,-10,4,-19,36,3,-71,1,-1,-31,76,51,-17,48,20,-46,48,-4,4,-1, 3,-19,-54,-6,-42,-62,18,-127,-30,-87,-91,58,36,-2,7,-54,62,8,-25,-34,-17,34,32,18,-30,31,29,22,17,14,65,-86, -26,-109,-84,22,-9,-7,-58,-44,17,-43,-55,9,10,12,-57,-6,-65,-16,4,-86,-21,59,-52,-23,21,-50,5,-9,-24,-32,48,-100, 
  /* [58][0][][] */ -34,-38,75,-109,-58,-40,13,-70,-86,-43,-91,63,-9,-50,55,-82,-115,87,54,-71,-50,-112,31,51,-59,63,-11,-3,43,-13,51,-23, -3,-101,49,-122,16,-32,36,-100,-30,-127,-47,14,51,-30,-19,-94,-50,45,71,-91,11,6,-36,-3,-8,75,-8,-13,-61,37,-14,-100, -35,-120,32,-24,60,85,56,-95,23,-67,-8,-22,25,33,-40,-8,-86,-12,46,-88,20,-10,-7,88,6,13,11,0,-66,64,-16,-32, 
  /* [59][0][][] */ 3,56,-70,-77,72,-43,50,-84,-127,-81,-4,80,30,-10,-46,-21,8,-35,-122,-25,-53,2,99,97,-127,49,-74,0,67,-37,3,-11, -32,-3,-21,-53,-48,-89,-49,-78,-23,-51,-54,48,10,13,-43,12,-38,6,-87,14,104,63,84,65,-81,20,-15,16,-52,-25,47,-31, -83,-64,-15,-37,68,-19,58,-53,72,-51,-55,-88,-22,20,23,-21,-11,-3,-28,-44,35,90,-43,22,13,-51,-60,-43,-76,-4,3,-62, 
  /* [60][0][][] */ -43,-110,-39,6,-76,9,16,-15,-116,0,6,-1,-5,50,-6,-74,-7,-46,-2,-65,5,-109,-33,-48,-127,-6,31,-67,52,-73,-60,14, 16,33,-114,43,-28,55,-48,17,-66,-118,-1,-114,36,-33,-52,-60,-112,-38,61,-49,-94,34,29,-78,-5,-114,1,3,3,-41,-71,40, 44,-14,-56,-38,-79,13,33,69,-82,-50,49,-6,40,29,-75,-30,70,-65,10,-40,-9,-63,-55,28,-109,-55,-88,-39,-91,-72,-74,48, 
  /* [61][0][][] */ 38,-15,-44,-46,26,-64,115,-11,-112,-3,11,9,-19,-25,23,-87,3,22,16,1,-73,57,-1,71,-82,50,11,-127,24,63,-23,-10, 3,32,-44,-37,34,-31,63,-21,-96,-88,-34,112,87,21,49,-73,37,44,93,-18,-114,-59,75,-78,-77,44,-15,3,49,19,-57,33, 14,-17,-45,-96,-20,-55,49,-111,-61,-57,-121,50,126,-6,4,-71,11,-100,-29,2,-84,28,88,-7,-7,39,-21,-28,9,-3,-50,87, 
  /* [62][0][][] */ -3,-15,-52,-26,-39,17,12,38,-90,39,6,-18,-39,-17,4,26,-7,22,-14,-9,26,-36,-6,-38,-127,21,-44,-51,-42,-49,-1,-10, -7,-8,-46,-11,1,51,20,17,-72,10,-2,-31,-85,28,-48,0,12,-22,-40,1,-13,-27,-7,-30,-88,-24,12,-63,-43,-6,-28,-27, -24,-31,-89,41,72,106,-38,18,37,-25,-23,-30,-42,61,54,51,-12,-17,-57,-52,-53,-2,-75,59,5,-6,14,35,-50,-33,-31,8, 
  /* [63][0][][] */ 79,1,-40,-91,-101,49,47,-81,46,-50,-32,17,38,-63,15,-71,-25,3,108,-46,-14,30,-43,-44,8,31,-44,2,-4,36,81,-13, -15,-90,31,-54,-3,-48,39,-84,16,-114,-94,-27,33,-10,-35,-119,6,8,-45,-65,48,4,-61,-24,-2,15,-32,-13,-34,51,20,26, -43,-56,5,-34,48,-33,56,-112,30,-100,-38,-21,-21,20,-99,0,-39,-96,62,-122,-27,5,-55,96,-8,-127,35,-38,-10,13,53,-22, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant8_scale = { 64, { 0.003526022657752037, 0.0022204031702131033, 0.0040289964526891708, 0.0034927623346447945, 0.0037273720372468233, 0.0046464237384498119, 0.0043342933058738708, 0.0030416874215006828, 0.0027163047343492508, 0.0034792299848049879, 0.0033122380264103413, 0.0029630586504936218, 0.0039060993585735559, 0.0047059156931936741, 0.0034225080162286758, 0.0052117770537734032, 0.0044615194201469421, 0.0025640397798269987, 0.0032717827707529068, 0.0047412291169166565, 0.0035655840765684843, 0.0033331390004605055, 0.0046606073155999184, 0.0035101259127259254, 0.0034776097163558006, 0.0048154979012906551, 0.0036984302569180727, 0.0031234470661729574, 0.0025418302975594997, 0.0032597361132502556, 0.004851263016462326, 0.0041027688421308994, 0.0035795317962765694, 0.0043099564500153065, 0.003661721246317029, 0.0049034897238016129, 0.003825347637757659, 0.0038711035158485174, 0.004178767092525959, 0.0039701005443930626, 0.0048608016222715378, 0.0030897518154233694, 0.0019558018539100885, 0.0040446948260068893, 0.0039698961190879345, 0.0043020686134696007, 0.0039891269989311695, 0.003460870822891593, 0.0035422251094132662, 0.0044413115829229355, 0.004114250186830759, 0.0041669262573122978, 0.0044762273319065571, 0.005018613301217556, 0.0041161985136568546, 0.0035225797910243273, 0.0020071801263839006, 0.0045308857224881649, 0.0035106069408357143, 0.0032591777853667736, 0.0015088835498318076, 0.0030374475754797459, 0.0044204667210578918, 0.0042089233174920082, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { -833, -713, -903, -734, -1850, 376, -889, -773, -1336, -105, -885, -856, -237, -1143, -901, -349, 291, -1039, -1177, -549, -105, -245, -615, -1063, 2176, 383, -1009, 1251, -37, -1194, -949, -252, 1391, 123, 279, 241, -401, -80, -365, -527, -53, -424, -1084, 10, -94, -949, -598, 621, -1742, -420, -1271, 82, -915, -177, -462, -458, -1186, -323, 716, 329, -961, -118, -856, -565, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00012296502245590091, 7.743340393062681e-05, 0.00014050552272237837, 0.00012180512567283586, 0.00012998680176679045, 0.0001620374241610989, 0.00015115231508389115, 0.00010607452713884413, 9.4727263785898685e-05, 0.00012133319978602231, 0.00011550959607120603, 0.00010333245882065967, 0.00013621966354548931, 0.00016411211981903762, 0.00011935509974136949, 0.00018175331933889538, 0.00015558915038127452, 8.9417240815237164e-05, 0.00011409877333790064, 0.00016534363385289907, 0.00012434467498678714, 0.0001162384869530797, 0.00016253205831162632, 0.00012241065269336104, 0.00012127669469919056, 0.00016793364193290472, 0.00012897749547846615, 0.00010892577847698703, 8.8642722403164953e-05, 0.0001136786668212153, 0.00016918090113904327, 0.00014307822857517749, 0.00012483108730521053, 0.00015030360373202711, 0.00012769731984008104, 0.0001710022334009409, 0.00013340356235858053, 0.00013499923807103187, 0.00014572856889571995, 0.00013845160719938576, 0.00016951354336924851, 0.0001077507040463388, 6.8205808929633349e-05, 0.00014105298032518476, 0.00013844449131283909, 0.00015002852887846529, 0.00013911513087805361, 0.00012069295189576223, 0.00012353007332421839, 0.00015488443023059517, 0.000143478624522686, 0.00014531562919728458, 0.00015610206173732877, 0.00017501700494904071, 0.00014354656741488725, 0.00012284496915526688, 6.9997557147871703e-05, 0.00015800820256117731, 0.00012242743105161935, 0.00011365919635863975, 5.2620169299189001e-05, 0.0001059266651282087, 0.00015415748930536211, 0.00014678022125735879, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[8*512] = { 
  -2, 8, 7, -19, 15, -19, -31, 15, -26, -21, 41, -27, -5, -29, 35, 51, -54, -8, -44, -24, 14, 28, 15, 32, -17, -17, -57, -30, 45, -1, 34, -65, 7, 57, 9, 5, -42, -32, -8, 9, -8, -64, -19, -1, -16, -32, -41, 18, -44, -3, 36, -14, -18, -19, -34, -10, 7, -3, -1, -13, -1, 3, -11, 27, 47, -22, 18, -10, 26, -26, -27, 22, -45, -38, 19, -18, 5, -12, 23, 34, -14, 19, -95, 5, -40, -4, 33, 31, -16, -27, -39, -4, 20, -11, 31, -38, -6, 59, 11, 47, -31, 6, -20, -4, 3, -26, 2, 33, 27, -40, -6, -12, -13, 3, 20, -8, -29, 12, -6, -12, -17, 9, 26, 18, -4, -22, -91, 32, 34, -11, -20, -3, 42, -27, -31, 36, -27, -35, -55, -11, 10, 2, 54, 19, -48, 8, -82, -1, -21, -58, 24, 36, -7, -34, -26, -13, 0, 11, 9, -35, -34, 42, 2, 16, 2, 14, -25, -6, 4, 3, 8, 9, 37, -77, -57, -2, 2, 31, 32, -10, 7, -26, 19, -31, -13, -5, 22, -11, 12, 4, -94, 22, 23, 16, 10, -2, 36, -60, 2, 15, -24, -34, -40, -15, 17, -13, 42, 23, -31, -1, -75, -20, 27, -31, 11, 16, -44, -8, -49, 2, -7, 13, 34, -21, -54, 23, -8, 29, 3, 8, -40, 4, 5, 25, 9, -4, 68, -69, -43, -10, -35, 43, 39, -30, -27, -2, 0, 10, -11, 12, 34, 1, 14, -3, -44, 14, 28, -9, 27, -36, 34, -23, 2, 11, 2, -34, -37, 28, 24, -21, 30, 8, -56, 14, -35, -16, 5, -45, 15, 25, -22, -30, -64, 27, -3, 25, 19, 19, -22, 37, -27, 42, 24, 11, -38, -16, -2, 14, 4, -6, 54, -69, -53, -24, -39, 59, 21, -21, -27, -26, 10, 26, -2, -8, 22, -2, 16, 17, -44, 34, 19, 5, 45, -6, -31, -14, -50, -21, -38, -42, -32, 9, 21, -29, -83, 37, -45, -49, -59, -14, 23, -35, 30, 21, 9, -34, -22, 8, 2, 2, 36, -76, 0, 22, -34, 38, 41, 26, -34, -3, 7, 37, -15, 23, 40, -22, -12, 0, -23, 52, 12, -21, -81, -13, 0, 28, 19, -2, 18, -7, -12, 40, -49, 24, 17, 16, 3, -24, -3, -26, -10, 31, 2, -46, -23, -54, -1, -17, -10, 7, -34, -2, -16, -14, 23, -24, 16, 12, -79, -60, -34, -38, -11, 7, 23, 10, -45, 11, -9, 20, 21, 33, -61, -11, 18, 21, -1, 59, 39, -49, -53, -20, -13, 63, 9, -7, -33, 4, 20, -8, 5, -4, 19, 31, 9, 49, 14, 31, 5, 26, 2, 61, -7, 13, -23, -7, -4, 0, -28, -21, -39, -17, -1, -62, -33, 29, 15, 5, -13, 5, -25, 23, -89, 7, -21, -19, 2, -31, 13, 0, -8, -12, -23, 44, 33, 19, -20, 11, 29, 38, -18, 11, 22, -9, 20, -20, -31, 35, -10, -13, -27, 14, -3, -20, 6, 13, -17, 10, 4, 8, -11, 2, 
  2, 18, -28, 10, 14, -32, -58, -17, 22, 30, -16, 21, -2, -11, -21, -63, -9, -23, 12, -1, 2, -22, -91, 8, 28, -21, -19, -24, -15, 17, 9, 16, 2, -40, 26, -37, 25, 13, -14, -36, -32, 21, -13, 2, 19, -10, 13, 17, 4, 7, 38, 23, -23, -21, -35, -11, 12, -11, -29, -26, -18, -44, -20, 18, 22, 7, -18, -31, 11, -25, -33, -8, 38, -5, 25, 7, -10, 18, -14, -63, -61, -4, -1, -19, 59, -27, -19, -13, -17, 4, -13, -14, -5, -52, 9, -65, 17, 18, 10, -30, -10, -31, 7, -27, -11, -50, -18, 16, 45, 42, -6, -31, -20, -27, 12, 28, -10, -16, 13, -23, -16, -15, -24, -36, -10, -17, -3, 29, 25, -1, -13, -2, -5, -22, -1, -6, 57, -44, 40, 21, -20, 11, -54, -61, -28, 8, 37, -23, 49, -7, -20, -16, -43, -19, -60, -26, -6, -32, 8, -36, -51, 0, 22, -20, -58, -24, 26, -12, -59, -48, -3, 44, 50, 13, 28, -37, -32, -46, 14, 26, -19, -13, 10, -4, -28, 15, -37, -14, 7, -52, 6, 12, 20, 18, 5, -13, 12, -44, -2, -27, 44, -32, 32, -5, 28, 11, -25, -111, -57, -11, 36, -81, 35, -23, -51, 9, -43, -23, -48, -105, 1, -46, 28, -36, -31, -3, 41, -17, -49, 8, 13, -19, -89, -4, -4, 8, 29, 38, 21, -39, -37, 27, 47, 9, -21, -26, -1, -28, -15, 1, -22, -47, 8, -37, -5, 26, 26, 8, -46, -71, 4, -63, 14, -60, 33, -57, 29, 18, 35, 15, -33, -70, -53, -18, 7, -38, 52, 30, -42, 4, -56, -49, -40, -59, -14, -18, 32, -42, -70, -8, 6, -32, -42, 9, 26, 7, -85, -16, 14, 42, 26, 40, 24, -45, -17, 7, 49, 28, -27, -37, 2, -47, 9, -14, -6, -54, -10, -26, -4, 39, 15, 16, -46, 4, 26, -55, 15, -3, 41, -75, 27, 24, -6, 6, -10, -31, -66, 31, 29, -12, 29, 5, -15, -5, -32, -27, -38, -58, -24, -20, 40, -1, -77, -4, 21, -2, -24, 8, 16, -14, -40, -38, -20, 13, 5, 27, 35, -49, -2, -30, 19, -17, -21, -33, 14, -31, -14, 8, -47, -9, 4, -61, -49, 28, 27, 6, -15, -9, -17, -32, 4, -49, 35, -59, 32, 0, 2, 21, -4, -37, -34, 37, 3, -33, 31, 18, -27, -8, -28, -13, -30, -56, 23, -23, 23, 6, -58, -24, 13, -38, -8, 28, 13, -21, -82, 20, -5, -5, -4, 18, 24, -54, 6, -37, 15, -18, -47, -17, 20, -62, 22, 6, -55, -30, -23, -34, 26, 13, 14, -8, -9, -45, -8, -38, -12, 24, 7, -8, 17, 28, -1, 10, -4, 2, -32, 1, 14, -53, 32, 27, -41, 10, -28, -1, -36, -46, 15, -31, 25, -26, 21, -27, -5, -32, -7, 22, -4, -41, -34, -26, 7, 29, 22, 14, -15, -20, -1, -28, 7, 27, -24, -18, 19, 10, 6, -6, -8, -45, -7, -28, 13, -17, 
  -19, -11, -6, -12, 7, 16, 20, 2, 4, -3, -1, -4, -4, -8, -62, 0, 20, -25, 20, -2, 3, -16, -10, -30, 6, 1, 15, 0, -19, 2, 11, 44, -9, -80, -22, 21, 5, -1, 13, -23, 6, 7, -10, -10, 8, 15, 21, -10, -42, 17, -35, -15, 9, -38, -1, -7, -11, 23, -21, -34, -2, -19, 1, -14, -69, 18, -30, 43, 10, -28, 44, -10, 18, 21, 10, -47, 17, -76, -24, 50, 1, -26, 37, 21, 12, -9, 18, -74, 3, -28, 20, -9, -18, -16, -49, 34, -17, 1, -4, 5, 52, -5, -6, 3, 18, -4, -14, -8, -34, 10, 10, 16, -15, 2, -79, -32, 34, -24, -56, 2, 21, 24, -45, -8, -16, 8, 5, -50, -27, 5, -25, 32, -21, 6, 31, 1, 19, 34, -39, -14, 28, -82, -23, 65, -40, 6, 42, 33, -17, 17, 36, -68, 35, -24, 5, 16, 1, -40, -54, 47, 40, 7, -14, -8, 39, -39, 9, -25, 48, -21, -1, -19, -66, 21, 42, 21, -2, 12, -56, 12, 36, 3, -43, 21, -7, 26, -61, 7, -6, 10, 36, -34, -81, -7, -38, 47, -37, -12, 37, -12, 39, 16, -13, 10, 10, -84, -21, 50, -21, -3, 33, 33, -17, -24, 25, -54, 12, 18, 24, 7, 4, -23, -70, 50, 25, 15, -22, -20, 38, -15, -21, -22, 37, -10, -17, 37, -34, -8, 21, 44, 36, -12, -71, 26, 35, 1, -60, 7, -8, 30, -17, -32, -4, -9, -9, -42, -77, 0, -25, 28, -47, -39, 52, -3, 8, 45, -41, -4, 0, -41, -3, 53, -38, -25, 43, 49, -40, -20, 21, -52, 35, -19, 26, 0, -17, -60, -64, 64, 27, -2, -32, -49, 47, -27, -32, -46, 36, -4, -4, -45, -107, -16, 27, 23, 19, -42, -69, 32, 36, 10, -53, -5, -7, 21, -32, -15, -21, 16, -9, -54, -43, 8, -34, 30, 10, -4, 53, -13, 16, 26, -24, -35, 14, -68, 21, 66, -3, -17, 24, 32, -22, -17, 13, -45, -8, 1, 25, -9, 15, -31, -86, 41, 38, 14, -27, -44, 45, -1, -33, -46, 24, -6, 24, -21, -35, -12, 20, 5, 24, -17, -51, -1, 21, 17, -21, -50, 26, 6, -41, 7, -18, -10, -23, -48, -58, -2, -42, 3, 40, -16, 32, 13, 17, 26, -32, -25, 16, -24, 25, 24, 12, 1, 14, 20, -33, -2, 1, -45, 24, 7, 10, -16, 5, -47, -121, 68, 27, 11, -13, -49, 7, -19, -6, -84, 23, -37, 18, -50, -26, -13, 9, -14, -19, 5, -57, -2, 17, -22, -49, -33, -11, 15, -9, -33, -8, 8, -14, -55, -53, -18, -10, -27, -9, 3, 27, -9, 11, 1, -25, -54, 26, -13, -20, 41, 4, 19, -6, 18, -40, 26, -16, -47, 6, 4, 9, -1, 25, -14, -20, 25, 12, 19, -40, 2, 27, -45, 15, -13, 0, 8, 12, -38, -12, -22, 0, 22, -23, -4, 1, -25, 17, -25, -28, -41, 16, -16, 0, -31, -16, 3, 4, -17, 
  -49, 7, 2, -9, -24, -10, 6, -15, 28, 6, -25, -49, 2, -29, -15, -27, 1, -18, -6, 8, -20, -67, 25, -47, 10, 33, -20, 8, -30, -72, 23, -14, 24, -53, 23, 20, 30, 9, -37, 22, 26, 9, -13, 5, 42, -53, 3, 9, 6, -7, -37, -2, -57, 17, -67, -59, 15, 12, -13, 40, 14, 21, -69, -47, 32, 15, -22, -21, -84, -35, -28, -30, 9, -26, -51, 44, -40, -12, -21, -16, -36, 18, -7, 35, -16, -17, 11, -52, 5, -4, -82, -33, -8, -42, -1, -7, 2, 5, -2, 38, 41, 17, -23, 19, 25, 14, -2, 32, -67, -9, -4, -1, -34, -25, -10, 12, -9, 42, -23, -13, 17, 21, 4, 45, -19, 10, -7, 22, 23, 2, -17, -21, -24, -62, 21, -37, -4, -18, 37, -7, -80, 8, 18, -27, -31, 22, -14, 35, 33, 4, 34, -13, -63, 31, -46, -24, 11, -18, 8, 14, -27, -10, -28, 36, 1, 31, -14, 8, 62, -1, 2, 1, 12, -3, 3, -6, 17, -2, -10, 8, -15, 34, 16, 14, 8, 19, 41, 51, -18, 28, -49, 10, 25, 21, -19, -29, -52, -13, -40, -28, 21, -40, 17, 40, -69, 10, 27, -12, -84, 26, -9, 25, 15, -42, 10, -25, -92, 27, -44, -28, -12, -17, 11, -18, -40, -12, 17, 6, -6, 31, -20, 28, 28, -18, 2, 9, -34, 13, 15, -51, 14, -25, -8, -11, -42, 44, -4, -19, -2, 32, 32, 52, -3, 17, -14, 8, 19, 5, 15, -31, -81, -26, -43, -16, 13, -20, 25, 6, -56, 3, -7, -12, -40, 36, -6, 43, 33, -27, 15, -8, -55, -12, -54, -23, -33, -41, 16, 0, -66, -3, 63, 19, -5, 19, -16, 8, 49, -34, -5, 40, -8, 17, 2, -64, -8, -23, -29, -9, -44, 59, 5, -2, -9, 29, 25, 69, -1, 23, -72, 15, 19, 2, -38, -30, -32, -5, -24, -3, -14, -37, 32, 16, -52, 9, 29, -14, -39, 21, 13, 20, 34, 14, 9, -23, -95, 35, -33, -34, -13, -12, 26, 23, -64, -13, -19, -10, -19, 12, 0, 5, 33, -35, -19, 24, 1, 23, -16, -12, -11, -37, -8, -22, 6, 60, 4, -17, -5, 15, 11, 31, -3, -2, 39, 3, 24, 8, 8, 20, -14, -73, -19, 15, -4, -10, 24, 0, -71, 3, 6, -40, -37, -6, 8, 10, 27, -8, -6, -3, -104, 2, 16, -94, 15, 27, 33, -32, -45, -37, -22, 17, -71, 22, 25, 19, 13, 13, -10, -11, 7, 14, 12, -51, -17, 15, -5, -3, -17, 48, 19, 6, -10, 36, 17, 21, -15, -38, -8, 23, 9, -18, -6, -60, -25, 38, -51, 16, -25, -25, 12, -3, -38, -13, 5, 7, -28, 1, 8, 4, 27, -9, -4, -18, -81, 11, -24, -36, 17, -21, 26, -13, -70, -31, -14, -40, -81, 32, -4, -18, -50, -11, -9, 8, 1, 11, -3, -39, 3, -27, 28, -43, -14, 12, -6, -15, -16, -7, -22, -23, -2, 13, 17, -48, 
  -15, 10, 56, 37, -57, -16, 47, -13, -35, -25, -13, -23, 4, -14, -32, 21, -45, 44, -11, 24, 14, 28, -100, 8, 8, -34, 40, 12, -52, 16, -37, 32, -25, 13, 5, 4, -32, -20, 46, -6, 24, 30, 7, -20, -2, 22, -2, 13, 4, -7, -57, -21, 24, 10, -1, 2, 12, -22, -39, 2, -3, -64, 12, -26, -27, 14, 69, 52, -51, -3, 47, 8, 6, 11, -38, -32, -14, 8, -20, -36, -16, -9, -4, -3, -32, 57, -66, -28, -17, -24, 30, 25, 7, 33, 10, 37, 22, -27, 17, 29, 24, -30, 40, 45, -22, 31, 9, -12, -13, -83, -20, -61, -25, -7, -58, 21, 41, 2, -3, -7, 7, -29, -62, -29, 4, -80, 29, -77, -37, -5, 67, 53, -46, -14, 44, -7, 20, -9, -78, -23, -14, -38, 1, -3, 37, -23, -14, 3, -10, 51, -54, -27, 15, -7, 34, -12, 13, 3, 14, 40, 22, 0, 7, 50, 19, -5, 31, 55, 14, 41, 2, -11, -17, -83, -18, -32, -39, 6, -41, -76, 19, -47, -2, -22, 2, -45, -33, -50, 15, -60, 38, -98, -55, 20, 84, 66, -39, -30, 53, -31, -5, 16, -55, -42, -30, -39, -15, -29, 26, -2, -35, 5, -61, 41, -25, -57, -53, -45, 19, -43, -11, 24, 21, 43, 43, -17, 15, 70, 37, -24, 15, 29, 26, 44, -14, 7, -38, -58, -32, -61, -73, -46, -66, -57, 26, -20, -27, -5, 23, -36, -67, -56, 16, -58, 37, -92, -57, 18, 84, 48, 18, -2, 41, 11, -40, 14, -39, -12, 18, -3, -34, -36, -11, 8, -32, 2, -7, 53, -74, -49, -14, -12, 35, -8, 10, 26, 35, 50, 4, -37, 17, 40, -16, 26, 35, 40, -3, 39, 11, 16, -47, -40, -19, -9, -52, -81, -56, -52, 35, -19, -6, -18, -10, -46, -8, -72, 8, -69, 39, -89, -59, -15, 89, 38, 8, 6, 49, 56, 22, 39, -65, 9, -25, 0, -51, -21, 2, 2, -23, -5, -57, 43, -42, 1, -23, -11, 26, 6, 7, 31, 50, 36, 28, 16, -34, 51, 27, 14, 12, 76, 19, 32, 1, 31, -41, -44, -12, -24, -71, -76, -94, 19, 29, -19, -20, 2, -9, -68, -12, -47, 4, -51, 42, -109, -87, -1, 58, 26, -35, 19, 18, 0, 31, 25, -53, -2, -8, -50, -20, -12, -27, 7, 9, -33, -27, 14, -33, -13, 9, -30, 19, 29, 3, -16, 9, 24, 15, 11, 6, 23, 19, -2, 24, 61, -35, 9, -12, 34, -45, -82, -38, -12, -65, -52, -57, -17, 23, -30, -27, 37, -8, -66, 0, -23, 10, -57, 1, -83, -47, -13, 17, 31, -87, -18, 12, 21, 15, 23, -13, -24, -4, 8, -20, -21, 15, -19, 1, 15, -15, -3, -2, 19, -36, -15, 1, 12, 15, -5, 12, -1, 7, -18, 29, 13, -3, -26, 12, 2, 19, 10, -9, -14, -53, 22, -7, -26, -2, 27, -17, -19, 38, -23, -10, -20, -10, 18, -25, -5, -12, -21, -26, -25, 
  -16, 8, -2, 17, 7, 21, -22, 23, 0, -4, -25, 47, 22, -31, 30, -29, -10, 10, -32, -33, 13, -9, -50, -2, 6, 25, -1, -24, 61, -3, -66, -56, 0, -16, -27, -23, 9, 3, 45, -25, -23, 12, 12, -11, -19, -31, -37, -63, 27, 6, -55, 15, -27, -4, 50, -28, -4, -55, 38, -22, 8, -1, 11, -1, 28, 4, -46, -37, 14, 50, -73, 1, 0, -21, -25, 2, 26, -41, 12, -84, 71, -15, -53, -124, -61, -12, -99, 7, 26, 50, -13, 34, -12, 61, -80, -33, -2, -59, 6, -72, -51, -61, 20, -37, -40, 5, 10, -38, -44, -10, -52, -7, 46, 16, -47, 8, -88, -20, 10, -68, 14, -104, 14, -33, 7, -45, -74, 3, 27, 17, -27, -43, -14, 67, -79, -15, -27, 9, 25, 45, 36, -7, 40, -26, 82, -8, 7, -92, -15, -35, -39, 40, 16, 39, -23, 44, 17, 11, -13, -65, -4, -37, -55, -31, -46, -49, 29, -22, -127, 26, -18, -35, -38, -4, -41, -9, 23, 14, -35, 12, -19, -43, 14, -46, 18, -69, 31, -73, -14, -41, -47, -7, 14, 16, -23, -16, -29, 77, -93, -31, -50, -10, 12, 13, 32, 0, -5, 3, 69, 12, -54, -73, -33, -9, -54, 34, 34, 50, -3, 29, -8, 38, -10, -42, -5, -47, -49, -63, -64, -8, 26, -25, -33, -25, 8, -38, 31, 8, -21, 8, 42, 11, -33, 16, -43, -50, 22, -28, -19, -79, 34, -21, 2, -90, -63, -1, 12, 11, -39, -38, -32, 44, -55, -10, -39, -29, 6, 25, 27, -8, 33, -11, 70, -2, -5, -64, -34, 4, -63, 11, 30, 29, 19, 48, 10, 45, -50, -15, -32, -80, -7, -80, -3, -50, 23, -79, -94, 13, 11, -45, 13, 2, -32, 12, 33, 12, -38, 8, -46, -17, 12, -21, -16, -85, 31, -87, -1, -27, -7, 2, 5, -17, -36, -19, -53, 34, -47, -41, -8, -70, 14, 21, 18, 6, 54, -43, 70, -56, -25, -92, -41, -11, -69, 38, 47, 44, -8, 14, 4, 37, -34, -16, -42, -30, 46, -62, -18, -31, 32, -95, -55, 3, 2, -4, -17, -9, -57, -7, 45, 26, 4, 37, -47, -38, 15, -15, -22, -108, 40, -36, 12, -29, -16, 2, 16, 7, -22, 25, -58, 27, 5, 18, -21, -23, 27, 7, 5, -20, -17, 0, 56, -30, -58, -60, -33, -38, -43, 24, 8, 12, 11, -11, -12, 39, -23, -35, -66, -28, -2, -32, -3, -78, 14, -85, -2, -40, -21, -8, -29, 10, -49, 9, 25, 38, -26, 26, -16, -33, 25, -14, 6, -68, 40, -36, 12, -15, -32, 44, 20, -14, 21, -6, -56, 2, -15, -1, 5, 9, -15, 30, 21, -20, 21, 8, 31, -10, -13, -29, -27, -36, -3, 3, 11, 12, 10, -2, -15, 20, -38, -9, -3, -4, -20, 15, -25, -79, 24, 2, -29, -2, 9, -2, -10, -32, -12, 28, 16, -1, 3, -2, 14, -4, 3, 34, 2, -20, 34, 2, -13, 21, -17, 24, 
  14, 9, -30, -36, -16, -7, -60, 9, -33, 12, 16, 14, -2, 51, 13, -29, 7, 16, -25, -78, -13, -30, -57, 32, 30, -17, 0, 9, -13, -18, 24, -22, 20, 25, -36, -6, -1, 19, -2, -11, -32, -5, -2, -3, -2, 28, 6, 8, -13, -2, -44, 18, 23, 11, 14, 46, -5, -56, 9, -6, 7, 10, 17, -18, 16, -13, -39, -35, -38, -26, -26, 12, -8, 28, 62, 3, -54, 52, -26, 0, -22, 3, -7, -79, 15, -2, -65, 36, -28, -37, 50, -16, 8, -21, 6, -78, 5, -71, 1, -8, 32, -19, -5, -18, -56, 16, -9, -71, 39, 39, -17, -12, 13, 41, -11, 52, 53, -61, 4, 53, -16, -85, -71, -27, -15, 21, 28, -66, 3, 6, -12, -34, 3, -30, -57, 18, -67, 20, 41, -25, -66, 51, -26, -54, -65, 3, -60, -76, -28, -19, -107, 46, -13, -38, 36, -1, -4, -14, -37, -67, -14, -112, -51, -66, -8, -74, 22, -25, -82, -16, -2, -53, -7, 9, -42, -6, 31, -17, -92, 26, 22, -67, 21, 50, 7, -94, -96, -29, -21, -23, 18, -120, 4, 10, -30, -24, -39, -59, -27, 35, -26, 23, 21, 13, -62, 67, -25, -43, -49, 10, -30, -81, -42, 51, -45, 36, -52, -62, 37, -23, -18, 15, -25, -19, -41, -77, -16, -56, -14, -41, 26, -67, -36, 4, -4, -29, -17, 18, -71, -1, 27, -44, -33, -8, 56, -56, 27, 70, -13, -55, -72, -31, 7, -50, 14, -84, -3, 20, -55, -27, -38, -3, -38, 36, -3, 8, 38, -22, -38, 50, -5, -33, -17, 7, -46, -55, -57, 13, -50, 26, -33, -33, 32, -4, -7, 19, -42, -15, -21, -47, -69, -57, -9, -31, 12, -90, -14, -4, 1, -65, -44, 12, -39, 33, 35, 0, -11, 16, 35, -39, 22, 55, 21, -27, -60, -47, 1, -15, 51, -106, 9, -13, -26, -55, -24, -58, -28, 19, -1, 1, 24, -46, -52, 39, -4, -19, -57, 16, -31, -65, -51, -10, -67, 30, -17, -7, 37, 14, 9, 37, -7, -94, 0, -49, -35, -35, -2, -87, 37, -5, -69, 13, 2, -54, -32, 18, -5, 22, 46, 2, -75, 9, 21, 6, 11, 34, -3, -58, -35, -45, -2, 0, 14, -86, 2, -7, -47, -42, -23, -67, -21, 31, -29, 17, 8, -11, -87, 56, 12, -33, -43, -26, -55, -72, -54, 24, -27, 34, -89, -13, 22, -14, -14, 9, -31, -64, 12, -72, 5, -6, 22, -40, 2, -18, -26, 12, 17, -28, -28, 8, -38, 60, 25, 14, 17, 16, 13, -12, 16, 34, -14, -37, -53, 3, -8, 26, 18, -68, -1, 12, 30, -34, 51, -9, -8, -3, -14, -1, 7, -34, -14, 21, 26, -7, -50, -21, -3, -22, -11, 10, 1, 3, -37, -19, 16, -24, 2, 8, -24, 4, -22, -6, -30, 33, 29, -12, 0, 4, 15, -1, -37, 4, -28, -5, 8, 19, 23, 7, -5, 22, -19, -27, 22, 30, -4, -16, -20, 19, -7, 13, 32, -24, 
  -36, -7, -2, -27, 15, -31, 2, 20, 29, -27, 11, -14, -1, 31, 0, 23, -62, -12, -24, 25, -19, 20, 35, -33, -40, 23, -10, 0, -29, 5, -8, -55, -4, 35, 24, 9, 1, -14, -26, 11, -14, -29, -8, 4, -6, -63, 20, -24, -6, -13, 64, 16, -8, 11, -5, 1, 16, 31, 33, 2, 14, 6, -6, 34, -34, 11, -2, -8, -1, 24, -56, -23, -28, -32, -47, 35, -3, -12, 27, 35, -63, 10, -13, 18, -2, 1, 55, -33, 18, 17, -35, -34, -18, 3, 1, 10, -1, 45, 1, 3, -31, 37, -67, 37, -64, -27, -9, 5, 2, -37, 11, 23, -58, 0, 44, -1, -99, 46, -50, -30, -16, 15, 32, 8, -9, 29, -13, 16, -79, 17, -19, -33, 19, 26, -65, 0, -27, -33, -19, 8, 2, -84, -4, 40, -1, -5, -11, 18, -21, -15, 45, -29, 11, 28, -99, -17, 11, -2, -63, -46, 1, 41, 22, 22, -68, 37, -70, 13, -21, -38, 5, 29, -17, -17, 28, 25, -76, -4, 59, -15, -73, 32, -101, -66, -17, 35, 41, 18, 3, 47, -38, 44, -123, -10, -21, -36, 13, 41, -33, -10, 22, -11, -77, -24, 17, -40, -56, 20, 20, -13, 1, 21, -50, 15, 40, -46, 36, 38, -56, 27, -20, -30, -95, 27, 18, 38, -2, -9, -28, 25, -84, 8, -40, -96, 0, 19, -26, -58, 33, 47, -69, -15, 38, -21, -77, 49, -102, -47, 8, 39, 38, -17, -1, 26, -16, 14, -78, 20, 21, -21, 40, 27, -71, 11, 6, 30, -71, 6, 4, -118, 0, 14, 26, -14, -31, 26, -42, -30, 50, -66, 42, 11, -73, 32, -13, -51, -91, -23, 11, 28, -18, 19, -31, 17, -105, 29, -22, -54, -7, -14, -81, -59, 14, 40, -69, -50, 33, -8, -91, 37, -101, -27, 11, 21, 14, 0, -8, 35, -77, 6, -80, -1, -57, -37, 10, 7, -44, -15, -1, 17, -70, 10, 22, -14, -5, 1, 2, 10, -41, 36, -48, -6, 47, -43, 10, 28, -23, 19, 5, -56, -72, 7, 46, 20, -35, -16, -24, 18, -68, 11, -35, -50, -5, 1, -66, -45, 23, 26, -28, -31, 45, -26, -61, 30, -97, -30, -17, 12, 32, 1, -20, 8, 5, -8, -89, 7, -12, 6, 19, 1, -1, -23, -27, 12, -78, 2, 16, -64, -46, 13, -23, 19, 7, 16, -11, 8, 16, -89, 29, 27, -48, 5, 13, -25, -55, -26, 23, 36, 0, 23, -22, 5, -28, 17, -29, -9, -23, 1, -27, -19, 22, 19, -30, -59, 24, 5, -27, 16, -47, -1, 0, 19, 50, -50, -10, 12, -11, 2, -72, -16, -23, 22, 28, -22, -19, 4, -5, 17, -72, -42, -1, -64, -4, 24, 11, -15, -6, 38, -50, 22, 5, -43, 32, 3, -99, 35, 3, 17, -44, -2, 37, 29, 13, -34, -35, 11, -64, 7, 22, -27, 4, 7, -4, -54, -20, 41, -74, -28, -11, -17, -25, 0, -93, 1, 11, 1, 21, -17, -3, 2, -7, 24, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 8,512 } };
const TfArray<1, float> quant10_scale = { 1, { 0.005217886995524168, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[8] = { -776, 930, -358, -642, -1267, -71, 2149, -446, };
const TfArray<1, int> tensor_dimension11 = { 1, { 8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00027951053925789893, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,31,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.046450152993202209, } };
const TfArray<1, int> quant12_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,31,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.034873578697443008, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,31,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.034873578697443008, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,16,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.034873578697443008, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,16,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.034873578697443008, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,16,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.053567763417959213, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,16,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.053567763417959213, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,8,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.053567763417959213, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,512 } };
const TfArray<1, float> quant20_scale = { 1, { 0.053567763417959213, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.26025876402854919, } };
const TfArray<1, int> quant21_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension0, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 992, (TfLiteIntArray*)&tensor_dimension13, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 992, (TfLiteIntArray*)&tensor_dimension15, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension17, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension19, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension21, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
